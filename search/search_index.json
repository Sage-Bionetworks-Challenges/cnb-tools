{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"cnb-tools","text":"<p>   Convenience tools/functions for challenges and benchmarking on   Synapse.org </p> <p> </p> <p>Documentation: https://sage-bionetworks-challenges.github.io/cnb-tools</p> <p>Source code: https://github.com/Sage-Bionetworks-Challenges/cnb-tools</p> <p>cnb-tools is a set of tools and commands that provides an interface for managing crowd-sourced challenges hosted on Synapse.org, including but not limited to, DREAM Challenges.</p>"},{"location":"#requirements","title":"Requirements","text":"<ul> <li>Python 3.9+</li> <li>Synapse account</li> </ul> <p>To fully utilize cnb-tools, you must have a Synapse account and provide your credentials to the tool.  To do so, create a <code>.synapseConfig</code> file in your home directory and enter the following:</p> <pre><code>[authentication]\nauthtoken=&lt;YOUR PAT&gt;\n</code></pre> <p>Generate a new Synapse Personal Access Token (PAT) with all token permissions enabled, then copy-paste it into <code>authtoken</code>. Save the file.</p> <p>For security, we recommend updating its permissions so that other users on your machine do not have read access to your credentials, e.g.</p> chmod 600 ~/.synapseConfigls -l ~/.synapseConfig-rw-------@ 1 user  staff  123 Jan  1 12:00 .synapseConfig"},{"location":"#installation","title":"Installation","text":"<p>For best practice, use a Python environment to install cnb-tools rather than directly into your base env.  In our docs, we will be using miniconda, but you can use miniforge, venv, pyenv, etc.</p> # Create a new env and activate itconda create -n cnb-tools python=3.12 -yconda activate cnb-tools# Install cnb-tools using pippip install cnb-toolsSuccessfully installed cnb-tools <p>Note</p> <p>cnb-tools builds off of the Synapse Python Client \u2014 by installing cnb-tools, you will also be installing synapseclient.</p> <p>\u2192 Read its docs.</p> <p>Verify the installation with:</p> cnb-toolsManage challenges on Synapse.org from the CLIEnter `cnb-tools --help` for usage information."},{"location":"#running-with-docker","title":"Running With Docker","text":"<p>If you rather not install <code>cnb-tools</code> onto your machine, you may still use it via Docker!  The package and list of versions are available here.</p> <p>To provide your Synapse credentials to the Docker container, you must first create a file with your Synapse PAT as the <code>SYNAPSE_AUTH_TOKEN</code> environment variable:</p> <pre><code>SYNAPSE_AUTH_TOKEN=&lt;YOUR PAT&gt;\n</code></pre> <p>The <code>docker run</code> command will look something like this, assuming the file is named <code>~/.synapse-config</code>:</p> docker run --rm \\     --env-file ~/.synapse-config \\     ghcr.io/sage-bionetworks-challenges/cnb-tools \\     COMMAND [ARGS]"},{"location":"#license","title":"License","text":"<p>cnb-tools is released under the Apache 2.0 license.</p>"},{"location":"changelog/release-notes/","title":"Release notes","text":""},{"location":"changelog/release-notes/#in-development","title":"In development","text":""},{"location":"changelog/release-notes/#features","title":"Features","text":"<ul> <li>Add new CLI command: <code>cnb-tools challenge SUBCOMMAND</code></li> </ul>"},{"location":"changelog/release-notes/#docs","title":"Docs","text":"<ul> <li>Add How-To tutorial on how the Validation Toolkit can be used</li> </ul>"},{"location":"changelog/release-notes/#bug-fixes","title":"Bug fixes","text":"<ul> <li>Remove custom classes, as to prevent future confusion with synapseclient's classes</li> </ul>"},{"location":"changelog/release-notes/#032","title":"0.3.2","text":""},{"location":"changelog/release-notes/#bug-fixes_1","title":"Bug fixes","text":"<ul> <li>Replace <code>|</code> with <code>typing.Union</code> for type-hinting in order to be compatible with Python 3.9</li> </ul>"},{"location":"changelog/release-notes/#031","title":"0.3.1","text":""},{"location":"changelog/release-notes/#bug-fixes_2","title":"Bug fixes","text":"<ul> <li>Fix Docker image deployment (#30)</li> </ul>"},{"location":"changelog/release-notes/#030","title":"0.3.0","text":""},{"location":"changelog/release-notes/#features_1","title":"Features","text":"<ul> <li>Add new module: validation_toolkit (#26)</li> </ul>"},{"location":"changelog/release-notes/#bug-fixes_3","title":"Bug fixes","text":"<ul> <li>Handle use case when there is one or more unknown submission IDs in given list (#23)</li> </ul>"},{"location":"changelog/release-notes/#020","title":"0.2.0","text":""},{"location":"changelog/release-notes/#features_2","title":"Features","text":"<ul> <li>Add new CLI command: <code>cnb-tools submission SUBCOMMAND</code> (#14, #19)</li> </ul>"},{"location":"changelog/release-notes/#docs_1","title":"Docs","text":"<ul> <li>Add Termynal plug-in (#10)</li> </ul>"},{"location":"changelog/release-notes/#internal","title":"Internal","text":"<ul> <li>Dependency version bump (#18)</li> <li>General CI workflow updates (#11, #13)</li> </ul>"},{"location":"changelog/release-notes/#011","title":"0.1.1","text":"<ul> <li>Add Dockerfile for GH package.</li> <li>Add CI workflow to deploy image on ghcr.io.</li> </ul>"},{"location":"changelog/release-notes/#010","title":"0.1.0","text":"<ul> <li>First commit. Prepare for PyPI publishing.</li> <li>Add initial version of code, docs, etc.</li> <li>Add CI workflows and templates.</li> </ul>"},{"location":"changelog/upgrade/","title":"How to upgrade","text":"<p>Update to the latest version with:</p> <pre><code>pip install --upgrade --force-reinstall cnb-tools\n</code></pre> <p>Show the currently installed version with:</p> <pre><code>pip show cnb-tools\n</code></pre>"},{"location":"reference/cli/","title":"CLI","text":"cnb-toolsManage challenges on Synapse.org from the CLIEnter `cnb-tools --help` for usage information.# Get the current versioncnb-tools --versioncnb-tools v0.2.0# Basic usagecnb-tools COMMAND ARGS [OPTIONS]"},{"location":"reference/cli/#command-submission","title":"Command: <code>submission</code>","text":"<p>Manage submissions on Synapse, e.g. download prediction file/Docker model, view submission metadata, update submission status, etc.</p>"},{"location":"reference/cli/#annotate","title":"<code>annotate</code>","text":"<p>Annotate a submission using a JSON file. This subcommand can be used to update existing annotations with new values.</p> <pre><code>cnb-tools submission annotate SUB_ID JSON_FILE [--verbose]\n</code></pre> <p>Replace the following:</p> <ul> <li><code>SUB_ID</code> - submission ID</li> <li><code>JSON_FILE</code> - filepath to JSON file containing annotations as   key-value pairs</li> </ul> <p>Options:</p> Name Type Description Default <code>--verbose</code> boolean Output all submission annotations after annotating False"},{"location":"reference/cli/#change-status","title":"<code>change-status</code>","text":"<p>Update the submission status of one or more submission(s).</p> <pre><code>cnb-tools submission change-status SUB_ID ... NEW_STATUS [--skip-errors]\n</code></pre> <p>Replace the following:</p> <ul> <li><code>SUB_ID ...</code> - submission ID(s)</li> <li><code>NEW_STATUS</code> - one of: <code>RECEIVED</code> | <code>VALIDATED</code> | <code>INVALID</code> | <code>SCORED</code> |   <code>ACCEPTED</code> | <code>CLOSED</code></li> </ul> <p>Note</p> <p>Consider using <code>submission reset</code> if you need to update the status to <code>RECEIVED</code>.</p> <p>Options:</p> Name Type Description Default <code>--skip-errors</code> boolean Continue update even if unknown ID error is encountered False"},{"location":"reference/cli/#delete","title":"<code>delete</code>","text":"<p>Delete one or more submission(s) from the evaluation queue. By default, this action will require confirmation; optionally use <code>--force</code> to bypass the prompt.</p> <p>Warning</p> <p>Once a submission has been deleted, it CANNOT be recovered. Use this command with extreme caution.</p> <pre><code>cnb-tools submission delete SUB_ID ... [--force] [--skip-errors]\n</code></pre> <p>Replace the following:</p> <ul> <li><code>SUB_ID ...</code> - submission ID(s)</li> </ul> <p>Options:</p> Name Type Description Default <code>--force</code> boolean Force deletion without confirmation False <code>--skip-errors</code> boolean Continue update even if unknown ID error is encountered False"},{"location":"reference/cli/#download","title":"<code>download</code>","text":"<p>Download a submission to your local machine.</p> <p>If the submission is a file, you can optionally specify the download destination with <code>--dest</code> (or <code>-d</code>). <code>--dest</code> is ignored if the submission is a Docker image.</p> <pre><code>cnb-tools submission download SUB_ID [--dest/-d DESTINATION]\n</code></pre> <p>Replace the following:</p> <ul> <li><code>SUB_ID</code> - submission ID</li> </ul> <p>Options:</p> Name Type Description Default <code>--dest</code>, <code>-d</code> str Filepath to where submission will be downloaded <code>.</code>"},{"location":"reference/cli/#info","title":"<code>info</code>","text":"<p>Get general information about a submission, such as the submission date, who submitted it, and name of the challenge. You can also get the current status and annotations with <code>--verbose</code>.</p> <pre><code>cnb-tools submission info SUB_ID [--verbose]\n</code></pre> <p>Replace the following:</p> <ul> <li><code>SUB_ID</code> - submission ID</li> </ul> <p>Options:</p> Name Type Description Default <code>--verbose</code> boolean Output the submission status and annotations False"},{"location":"reference/cli/#reset","title":"<code>reset</code>","text":"<p>Reset one or more submission(s) (set <code>status</code> to <code>RECEIVED</code>).</p> <pre><code>cnb-tools submission reset SUB_ID ... [--skip-errors]\n</code></pre> <p>Replace the following:</p> <ul> <li><code>SUB_ID ...</code> - submission ID(s)</li> </ul> <p>Options:</p> Name Type Description Default <code>--skip-errors</code> boolean Continue update even if unknown ID error is encountered False <p>More commands coming soon!</p>"},{"location":"reference/validation-toolkit/","title":"Validation Toolkit","text":""},{"location":"reference/validation-toolkit/#cnb_tools.validation_toolkit.check_binary_values","title":"<code>check_binary_values(pred_col, label1=0, label2=1)</code>","text":"<p>Check that values are binary (default: 0 or 1).</p> Example Use Case <p>Predictions can only be 0 (no disease present) or 1 (disease present).</p> PARAMETER DESCRIPTION <code>pred_col</code> <p>Dataframe column containing the values to validate.</p> <p> TYPE: <code>Series</code> </p> <code>label1</code> <p>First acceptable binary value.</p> <p> TYPE: <code>int</code> DEFAULT: <code>0</code> </p> <code>label2</code> <p>Second acceptable binary value.</p> <p> TYPE: <code>int</code> DEFAULT: <code>1</code> </p> RETURNS DESCRIPTION <code>str</code> <p>An error message, if any (default is an empty string)</p> Source code in <code>cnb_tools/validation_toolkit.py</code> <pre><code>def check_binary_values(\n    pred_col: Series, label1: int = 0, label2: int = 1\n) -&gt; str:\n    \"\"\"Check that values are binary (default: 0 or 1).\n\n    Tip: Example Use Case\n      Predictions can only be 0 (no disease present) or 1 (disease present).\n\n    Args:\n        pred_col: Dataframe column containing the values to validate.\n        label1: First acceptable binary value.\n        label2: Second acceptable binary value.\n\n    Returns:\n        An error message, if any (default is an empty string)\n\n    \"\"\"\n    if not pred_col.isin([label1, label2]).all():\n        return f\"'{pred_col.name}' values should only be {label1} or {label2}.\"\n    return \"\"\n</code></pre>"},{"location":"reference/validation-toolkit/#cnb_tools.validation_toolkit.check_duplicate_keys","title":"<code>check_duplicate_keys(pred_col, verbose=False)</code>","text":"<p>Check for duplicate keys.</p> Example Use Case <p>There is exactly one prediction for a patient / sample / etc.</p> PARAMETER DESCRIPTION <code>pred_col</code> <p>Dataframe column containing the keys to validate</p> <p> TYPE: <code>Series</code> </p> <code>verbose</code> <p>Include list of affected keys in error message</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> RETURNS DESCRIPTION <code>str</code> <p>An error message, if any (default is an empty string)</p> Source code in <code>cnb_tools/validation_toolkit.py</code> <pre><code>def check_duplicate_keys(pred_col: Series, verbose: bool = False) -&gt; str:\n    \"\"\"Check for duplicate keys.\n\n    Tip: Example Use Case\n      There is exactly one prediction for a patient / sample / etc.\n\n    Args:\n      pred_col: Dataframe column containing the keys to validate\n      verbose: Include list of affected keys in error message\n\n    Returns:\n       An error message, if any (default is an empty string)\n\n    \"\"\"\n    error = \"\"\n    duplicates = pred_col.duplicated()\n    if duplicates.any():\n        error = f\"Found {duplicates.sum()} duplicate ID(s)\"\n\n        if verbose:\n            error += f\": {pred_col[duplicates].to_list()}\"\n    return error\n</code></pre>"},{"location":"reference/validation-toolkit/#cnb_tools.validation_toolkit.check_missing_keys","title":"<code>check_missing_keys(gold_col, pred_col, verbose=False)</code>","text":"<p>Check for missing keys.</p> Example Use Case <p>There is at least one prediction for every patient / sample / etc.</p> PARAMETER DESCRIPTION <code>gold_col</code> <p>Dataframe column containing the true keys</p> <p> TYPE: <code>Series</code> </p> <code>pred_col</code> <p>Dataframe column containing the keys to validate</p> <p> TYPE: <code>Series</code> </p> <code>verbose</code> <p>Include list of affected keys in error message</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> RETURNS DESCRIPTION <code>str</code> <p>An error message, if any (default is an empty string)</p> Source code in <code>cnb_tools/validation_toolkit.py</code> <pre><code>def check_missing_keys(\n    gold_col: Series, pred_col: Series, verbose: bool = False\n) -&gt; str:\n    \"\"\"Check for missing keys.\n\n    Tip: Example Use Case\n      There is at least one prediction for every patient / sample / etc.\n\n    Args:\n      gold_col: Dataframe column containing the true keys\n      pred_col: Dataframe column containing the keys to validate\n      verbose: Include list of affected keys in error message\n\n    Returns:\n       An error message, if any (default is an empty string)\n\n    \"\"\"\n    error = \"\"\n    missing_ids = gold_col[~gold_col.isin(pred_col)]\n    if missing_ids.any():\n        error = f\"Found {missing_ids.shape[0]} missing ID(s)\"\n\n        if verbose:\n            error += f\": {missing_ids.to_list()}\"\n    return error\n</code></pre>"},{"location":"reference/validation-toolkit/#cnb_tools.validation_toolkit.check_nan_values","title":"<code>check_nan_values(pred_col)</code>","text":"<p>Check for NAN values.</p> Example Use Case <p>Predictions must not be null / None.</p> PARAMETER DESCRIPTION <code>pred_col</code> <p>Dataframe column containing the values to validate</p> <p> TYPE: <code>Series</code> </p> RETURNS DESCRIPTION <code>str</code> <p>An error message, if any (default is an empty string)</p> Source code in <code>cnb_tools/validation_toolkit.py</code> <pre><code>def check_nan_values(pred_col: Series) -&gt; str:\n    \"\"\"Check for NAN values.\n\n    Tip: Example Use Case\n      Predictions must not be null / None.\n\n    Args:\n      pred_col: Dataframe column containing the values to validate\n\n    Returns:\n       An error message, if any (default is an empty string)\n\n    \"\"\"\n    nan_count = pred_col.isna().sum()\n    if nan_count:\n        return f\"'{pred_col.name}' column contains {nan_count} NaN value(s).\"\n    return \"\"\n</code></pre>"},{"location":"reference/validation-toolkit/#cnb_tools.validation_toolkit.check_unknown_keys","title":"<code>check_unknown_keys(gold_col, pred_col, verbose=False)</code>","text":"<p>Check for unknown keys.</p> Example Use Case <p>There are no predictions without a corresponding groundtruth value.</p> PARAMETER DESCRIPTION <code>gold_col</code> <p>Dataframe column containing the true keys</p> <p> TYPE: <code>Series</code> </p> <code>pred_col</code> <p>Dataframe column containing the keys to validate</p> <p> TYPE: <code>Series</code> </p> <code>verbose</code> <p>Include list of affected keys in error message</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> RETURNS DESCRIPTION <code>str</code> <p>An error message, if any (default is an empty string)</p> Source code in <code>cnb_tools/validation_toolkit.py</code> <pre><code>def check_unknown_keys(\n    gold_col: Series, pred_col: Series, verbose: bool = False\n) -&gt; str:\n    \"\"\"Check for unknown keys.\n\n    Tip: Example Use Case\n      There are no predictions without a corresponding groundtruth value.\n\n    Args:\n      gold_col: Dataframe column containing the true keys\n      pred_col: Dataframe column containing the keys to validate\n      verbose: Include list of affected keys in error message\n\n    Returns:\n       An error message, if any (default is an empty string)\n\n    \"\"\"\n    error = \"\"\n    unknown_ids = pred_col[~pred_col.isin(gold_col)]\n    if unknown_ids.any():\n        error = f\"Found {unknown_ids.shape[0]} unknown ID(s)\"\n\n        if verbose:\n            error += f\": {unknown_ids.to_list()}\"\n    return error\n</code></pre>"},{"location":"reference/validation-toolkit/#cnb_tools.validation_toolkit.check_values_range","title":"<code>check_values_range(pred_col, min_val=0, max_val=1)</code>","text":"<p>Check that values are between min and max values, inclusive.</p> Example Use Case <p>Predictions must be a probability from 0 (disease not likely) to 1 (disease likely).</p> PARAMETER DESCRIPTION <code>pred_col</code> <p>Dataframe column containing the values to validate</p> <p> TYPE: <code>Series</code> </p> <code>min_val</code> <p>Lower limit of range</p> <p> TYPE: <code>Union[int, float]</code> DEFAULT: <code>0</code> </p> <code>max_val</code> <p>Upper limit of range</p> <p> TYPE: <code>Union[int, float]</code> DEFAULT: <code>1</code> </p> RETURNS DESCRIPTION <code>str</code> <p>An error message, if any (default is an empty string)</p> Source code in <code>cnb_tools/validation_toolkit.py</code> <pre><code>def check_values_range(\n    pred_col: Series,\n    min_val: Union[int, float] = 0,\n    max_val: Union[int, float] = 1\n) -&gt; str:\n    \"\"\"Check that values are between min and max values, inclusive.\n\n    Tip: Example Use Case\n      Predictions must be a probability from 0 (disease not likely) to 1\n      (disease likely).\n\n    Args:\n      pred_col: Dataframe column containing the values to validate\n      min_val: Lower limit of range\n      max_val: Upper limit of range\n\n    Returns:\n       An error message, if any (default is an empty string)\n\n    \"\"\"\n    if (pred_col &lt; min_val).any() or (pred_col &gt; max_val).any():\n        return f\"'{pred_col.name}' values should be between [{min_val}, {max_val}].\"\n    return \"\"\n</code></pre>"},{"location":"user-guide/cheat-sheet/","title":"Cheat sheet","text":"<p>Content coming soon!</p>"},{"location":"user-guide/contributing/","title":"Contributing","text":"<p>\ud83d\udc4b Hi there! We're excited you're here.</p> <p>By contributing, you are agreeing that we may redistribute your work under this license.</p>"},{"location":"user-guide/contributing/#development-process","title":"Development process","text":"<p>The cnb-tools project is tracked with issues and pull requests (PR). To contribute, modify the project in your own fork and issue a PR once you are ready for other devs to review and discuss.</p> <p>Here is a typical contribution workflow:</p> <ol> <li> <p>(optional) Assign issue</p> <p>See a bug or feature you'd like to handle? Go ahead and assign yourself!  That way, no duplicated effort will be done.  This will also let the community that there is some activity with the ticket.</p> </li> <li> <p>If you're a first-time contributor:</p> <p>Create your own copy of cnb-tools by clicking on Fork on the main repository on GitHub. Then, clone the project to your local machine and add the upstream repository:</p> <pre><code>git clone https://github.com/&lt;your-username&gt;/cnb-tools.git\ncd cnb-tools\ngit remote add upstream https://github.com/Sage-Bionetworks-Challenges/cnb-tools.git\n</code></pre> </li> <li> <p>(if applicable) Sync fork with upstream</p> <p>Navigate to your fork on GitHub and select Sync fork above the list of files.  Review the details of the upstream commits as needed, then click Update branch.</p> </li> <li> <p>Branch off <code>main</code> and develop your contribution</p> <p>Ensure <code>main</code> is up-to-date in your local dev, then create a new feature branch. We recommend prefixing the new branch name with either <code>bug</code> or <code>feat</code> \u2014 depending on what you're working on - followed by its GitHub tracking number:</p> <pre><code>git checkout main &amp;&amp; git pull\ngit checkout -b &lt;feat/bug-123&gt; main\n</code></pre> <p>If there is not an associating GitHub ticket, use a concise descriptive title, like:</p> <pre><code>feat-add_submission_module\nbug-fix_readme_typos\n</code></pre> </li> <li> <p>Document your changes</p> <p>Document your contribution by adding or updating the docstrings as necessary. The format we follow is the Google-style docstrings.</p> </li> <li> <p>Push changes to fork</p> <p>If this is the first time pushing the feature branch to the fork:</p> <pre><code>git push --set-upstream origin &lt;feat/bug-123&gt;\n</code></pre> <p>For subsequent pushes:</p> <pre><code>git push\n</code></pre> </li> <li> <p>Open a PR to upstream <code>main</code> once ready</p> <p>Follow our PR template.  Someone from the Sage Challenges &amp; Benchmarking team will then review, and either approve + merge or requests changes.</p> </li> </ol>"},{"location":"user-guide/contributing/#code-style","title":"Code style","text":"<p>cnb-tools uses flake8 to enforce PEP 8 styling consistency and to check for possible errors. We recommend setting up your editor to follow PEP 8 for a more seamless contribution experience.</p>"},{"location":"user-guide/contributing/#documentation","title":"Documentation","text":"<p>The documentation uses MkDocs, mkdocstrings, and the Material theme.  All docs are located in the <code>./docs</code> directory and are written in Markdown format.</p> <ul> <li> <p>To add a new page:</p> <p>Create a Markdown file in <code>./docs</code>, then add the page to the <code>nav</code>  setting in <code>./mkdocs.yml</code>.</p> </li> <li> <p>To insert docstrings information:</p> <p>Use <code>::: identifer</code>, where <code>identifer</code> is the name of the package/module/class you want to insert information for:</p> <pre><code># Insert docstring for package\n::: my_package\n\n# Insert docstring for module\n::: my_package.my_module\n\n# Insert docstring for class\n::: my_package.my_module.MyClass\n</code></pre> <p>You can also change how the docstring is rendered by adding <code>options</code> - read its docs for more details.</p> </li> <li> <p>To add an animated terminal window:</p> <p>Add <code>&lt;!-- termynal --&gt;</code> before the code block.</p> <p>For the \"typing\" effect, prefix the line with <code>$</code>.</p> </li> <li> <p>To test your changes:</p> <p>Build a local docs site that will auto-reload with any changes:</p> </li> </ul> mkdocs serveINFO    -  Building documentation...INFO    -  Cleaning site directoryINFO    -  Documentation built in 0.51 secondsINFO    -  [10:20:58] Watching paths for changes: 'docs', 'mkdocs.yml'INFO    -  [10:20:58] Serving on http://127.0.0.1:8000/ <p>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 This will serve the documentation on <code>http://127.0.0.1:8000</code>.</p>"},{"location":"user-guide/contributing/#testing","title":"Testing","text":"<p>More info coming soon</p>"},{"location":"user-guide/introduction/","title":"Introduction","text":"<p>Content coming soon!</p>"}]}